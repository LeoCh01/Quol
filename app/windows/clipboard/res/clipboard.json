{
  "copy": [
    "import psutil\nfrom GPUtil import GPUtil\nimport pyqtgraph as pg\nfrom PySide6.QtCore import QTimer\nfrom PySide6.QtWidgets import QLabel, QVBoxLayout, QWidget\n\nfrom lib.quol_window import QuolMainWindow\nfrom lib.window_loader import WindowInfo, WindowContext\n\n\nclass MainWindow(QuolMainWindow):\n    def __init__(self, window_info: WindowInfo, window_context: WindowContext):\n        super().__init__('Stats', window_info, window_context, default_geometry=(300, 300, 200, 1))\n\n        # Text labels\n        self.cpu_label = QLabel(\"CPU Usage:\")\n        self.ram_label = QLabel(\"RAM Usage:\")\n        self.gpu_label = QLabel(\"GPU Usage:\")\n        self.net_label = QLabel(\"Network Speed:\")\n\n        # Add labels to layout\n        for lbl in [self.cpu_label, self.ram_label, self.gpu_label, self.net_label]:\n            self.layout.addWidget(lbl)\n\n        # Create real-time plots\n        self.cpu_plot = self.create_plot(\"CPU Usage (%)\")\n        self.ram_plot = self.create_plot(\"RAM Usage (%)\")\n        self.gpu_plot = self.create_plot(\"GPU Usage (%)\")\n\n        self.cpu_data = []\n        self.ram_data = []\n        self.gpu_data = []\n        self.max_points = 60  # show last 60 seconds\n\n        self.last_net_io = psutil.net_io_counters()\n\n        # Timer for updates\n        self.timer = QTimer(self)\n        self.timer.timeout.connect(self.update_stats)\n        self.timer.start(1000)\n\n    def create_plot(self, title):\n        plot_widget = pg.PlotWidget(title=title)\n        plot_widget.setBackground('#1e1e1e')\n        plot_widget.showGrid(x=True, y=True)\n        plot_widget.setYRange(0, 100)\n        self.layout.addWidget(plot_widget)\n        return plot_widget\n\n    def update_stats(self):\n        # --- CPU ---\n        cpu_percent = psutil.cpu_percent()\n        self.cpu_label.setText(f\"CPU Usage: {cpu_percent:.1f}%\")\n        self.cpu_data.append(cpu_percent)\n\n        # --- RAM ---\n        ram = psutil.virtual_memory()\n        self.ram_label.setText(f\"RAM Usage: {ram.percent:.1f}%\")\n        self.ram_data.append(ram.percent)\n\n        # --- GPU ---\n        gpus = GPUtil.getGPUs()\n        if gpus:\n            gpu_percent = gpus[0].load * 100\n            self.gpu_label.setText(f\"GPU Usage: {gpu_percent:.1f}%\")\n        else:\n            gpu_percent = 0\n            self.gpu_label.setText(\"GPU Usage: N/A\")\n        self.gpu_data.append(gpu_percent)\n\n        # --- Network ---\n        net_io = psutil.net_io_counters()\n        sent_speed = (net_io.bytes_sent - self.last_net_io.bytes_sent) / 1024\n        recv_speed = (net_io.bytes_recv - self.last_net_io.bytes_recv) / 1024\n        self.net_label.setText(f\"Network: \u2191 {sent_speed:.1f} KB/s \u2193 {recv_speed:.1f} KB/s\")\n        self.last_net_io = net_io\n\n        # Keep history short\n        self.cpu_data = self.cpu_data[-self.max_points:]\n        self.ram_data = self.ram_data[-self.max_points:]\n        self.gpu_data = self.gpu_data[-self.max_points:]\n\n        # Update plots\n        self.cpu_plot.plot(self.cpu_data, clear=True, pen=pg.mkPen('cyan', width=2))\n        self.ram_plot.plot(self.ram_data, clear=True, pen=pg.mkPen('orange', width=2))\n        self.gpu_plot.plot(self.gpu_data, clear=True, pen=pg.mkPen('green', width=2))\n",
    "import psutil\nfrom GPUtil import GPUtil\nimport pyqtgraph as pg\nfrom PySide6.QtCore import QTimer, QThread, Signal, QObject, Qt\nfrom PySide6.QtWidgets import QLabel, QVBoxLayout, QWidget, QListWidget, QListWidgetItem, QTableWidget, QHeaderView, \\\n    QTableWidgetItem\n\nfrom lib.quol_window import QuolMainWindow\nfrom lib.window_loader import WindowInfo, WindowContext\n\n\nclass MainWindow(QuolMainWindow):\n    def __init__(self, window_info: WindowInfo, window_context: WindowContext):\n        super().__init__('Stats', window_info, window_context, default_geometry=(300, 300, 250, 1))\n\n        self.max_points = 60\n        self.cpu_data = [0] * self.max_points\n        self.ram_data = [0] * self.max_points\n        self.gpu_data = [0] * self.max_points\n        self.gpu_percent = 0\n\n        # Graphs\n        self.cpu_plot, self.cpu_curve = self.create_plot(\"CPU (%)\", 'cyan')\n        self.ram_plot, self.ram_curve = self.create_plot(\"RAM (%)\", 'orange')\n        self.gpu_plot, self.gpu_curve = self.create_plot(\"GPU (%)\", 'green')\n\n        # Network\n        self.net_label = QLabel(\"\u2191 0.0 KB/s \u2193 0.0 KB/s\")\n        self.layout.addWidget(self.net_label)\n        self.last_net_io = psutil.net_io_counters()\n\n        # Processes\n        self.layout.addWidget(QLabel(\"Top Processes\"))\n        self.process_table = QTableWidget(5, 3)\n        self.process_table.setHorizontalHeaderLabels([\"Process\", \"CPU %\", \"RAM %\"])\n        self.process_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)\n        self.process_table.verticalHeader().setVisible(False)\n        self.process_table.setEditTriggers(QTableWidget.NoEditTriggers)\n        self.process_table.setFocusPolicy(Qt.NoFocus)\n        self.process_table.setSelectionMode(QTableWidget.NoSelection)\n        self.layout.addWidget(self.process_table)\n\n        # Timers\n        self.timer = QTimer(self)\n        self.timer.timeout.connect(self.update_main_stats)\n        self.timer.start(1000)\n\n        # Background thread\n        self.worker = BackgroundWorker()\n        self.worker_thread = QThread()\n        self.worker.moveToThread(self.worker_thread)\n        self.worker.updated.connect(self.update_background_stats)\n        self.worker_thread.started.connect(self.worker.run)\n        self.worker_thread.start()\n\n    def create_plot(self, base_title, color):\n        plot_widget = pg.PlotWidget()\n        plot_widget.setBackground('#1e1e1e')\n        plot_widget.showGrid(x=True, y=True)\n        plot_widget.setYRange(0, 100)\n        curve = plot_widget.plot(pen=pg.mkPen(color=color, width=2))\n        plot_widget.setTitle(f\"{base_title} (0%)\")\n        self.layout.addWidget(plot_widget)\n        return plot_widget, curve\n\n    def update_main_stats(self):\n        # CPU\n        cpu_percent = psutil.cpu_percent()\n        self.cpu_data.append(cpu_percent)\n        self.cpu_data = self.cpu_data[-self.max_points:]\n        self.cpu_curve.setData(self.cpu_data)\n        self.cpu_plot.setTitle(f\"CPU ({cpu_percent:.1f}%)\")\n\n        # RAM\n        ram = psutil.virtual_memory()\n        self.ram_data.append(ram.percent)\n        self.ram_data = self.ram_data[-self.max_points:]\n        self.ram_curve.setData(self.ram_data)\n        self.ram_plot.setTitle(f\"RAM ({ram.percent:.1f}%)\")\n\n        # GPU\n        self.gpu_data.append(self.gpu_percent)\n        self.gpu_data = self.gpu_data[-self.max_points:]\n        self.gpu_curve.setData(self.gpu_data)\n        self.gpu_plot.setTitle(f\"GPU ({self.gpu_percent:.1f}%)\")\n\n        # Network\n        net_io = psutil.net_io_counters()\n        sent_speed = (net_io.bytes_sent - self.last_net_io.bytes_sent) / 1024\n        recv_speed = (net_io.bytes_recv - self.last_net_io.bytes_recv) / 1024\n        self.net_label.setText(f\"\u2191 {sent_speed:.1f} KB/s   \u2193 {recv_speed:.1f} KB/s\")\n        self.last_net_io = net_io\n\n    def update_background_stats(self, top_procs, gpu_percent):\n        self.gpu_percent = gpu_percent\n        self.process_table.setRowCount(len(top_procs))\n        for row, p in enumerate(top_procs):\n            name_item = QTableWidgetItem(p['name'][:20])\n            cpu_item = QTableWidgetItem(f\"{p['cpu_percent']:.1f}\")\n            ram_item = QTableWidgetItem(f\"{p['memory_percent']:.1f}\")\n            for col, item in enumerate([name_item, cpu_item, ram_item]):\n                item.setTextAlignment(Qt.AlignCenter)\n                self.process_table.setItem(row, col, item)\n\n    def closeEvent(self, event):\n        self.worker.running = False\n        self.worker_thread.quit()\n        self.worker_thread.wait()\n        super().closeEvent(event)\n\n\n\nclass BackgroundWorker(QObject):\n    updated = Signal(list, float)  # processes, gpu_percent\n\n    def __init__(self):\n        super().__init__()\n        self.running = True\n\n    def run(self):\n        while self.running:\n            try:\n                # Get top processes (sorted)\n                procs = [\n                    p.info for p in psutil.process_iter(['name', 'cpu_percent', 'memory_percent'])\n                    if p.info['cpu_percent'] is not None\n                ]\n                top_procs = sorted(procs, key=lambda p: (p['cpu_percent'], p['memory_percent']), reverse=True)[:5]\n            except Exception:\n                top_procs = []\n\n            # Get GPU load\n            try:\n                gpus = GPUtil.getGPUs()\n                gpu_percent = gpus[0].load * 100 if gpus else 0\n            except Exception:\n                gpu_percent = 0\n\n            self.updated.emit(top_procs, gpu_percent)\n            QThread.msleep(3000)  # update every 3 seconds\n",
    "import psutil\nfrom GPUtil import GPUtil\nimport pyqtgraph as pg\nfrom PySide6.QtCore import QTimer, QThread, Signal, QObject, Qt\nfrom PySide6.QtWidgets import QLabel, QVBoxLayout, QWidget, QListWidget, QListWidgetItem, QTableWidget, QHeaderView, \\\n    QTableWidgetItem\n\nfrom lib.quol_window import QuolMainWindow\nfrom lib.window_loader import WindowInfo, WindowContext\n\n\nclass MainWindow(QuolMainWindow):\n    def __init__(self, window_info: WindowInfo, window_context: WindowContext):\n        super().__init__('Stats', window_info, window_context, default_geometry=(300, 300, 250, 1))\n\n        self.max_points = 60\n        self.cpu_data = [0] * self.max_points\n        self.ram_data = [0] * self.max_points\n        self.gpu_data = [0] * self.max_points\n        self.gpu_percent = 0\n\n        # Graphs\n        self.cpu_plot, self.cpu_curve = self.create_plot(\"CPU (%)\", 'cyan')\n        self.ram_plot, self.ram_curve = self.create_plot(\"RAM (%)\", 'orange')\n        self.gpu_plot, self.gpu_curve = self.create_plot(\"GPU (%)\", 'green')\n\n        # Network\n        self.net_label = QLabel(\"\u2191 0.0 KB/s \u2193 0.0 KB/s\")\n        self.layout.addWidget(self.net_label)\n        self.last_net_io = psutil.net_io_counters()\n\n        # Processes\n        self.layout.addWidget(QLabel(\"Top Processes\"))\n        self.process_table = QTableWidget(5, 3)\n        self.process_table.setHorizontalHeaderLabels([\"Process\", \"CPU %\", \"RAM %\"])\n        self.process_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)\n        self.process_table.verticalHeader().setVisible(False)\n        self.process_table.setEditTriggers(QTableWidget.NoEditTriggers)\n        self.process_table.setFocusPolicy(Qt.NoFocus)\n        self.process_table.setSelectionMode(QTableWidget.NoSelection)\n        self.layout.addWidget(self.process_table)\n\n        # Timers\n        self.timer = QTimer(self)\n        self.timer.timeout.connect(self.update_main_stats)\n        self.timer.start(1000)\n\n        # Background thread\n        self.worker = BackgroundWorker()\n        self.worker_thread = QThread()\n        self.worker.moveToThread(self.worker_thread)\n        self.worker.updated.connect(self.update_background_stats)\n        self.worker_thread.started.connect(self.worker.run)\n        self.worker_thread.start()\n\n    def create_plot(self, base_title, color):\n        plot_widget = pg.PlotWidget()\n        plot_widget.setBackground('#1e1e1e')\n        plot_widget.showGrid(x=True, y=True)\n        plot_widget.setYRange(0, 100)\n        curve = plot_widget.plot(pen=pg.mkPen(color=color, width=2))\n        plot_widget.setTitle(f\"{base_title} (0%)\")\n        self.layout.addWidget(plot_widget)\n        return plot_widget, curve\n\n    def update_main_stats(self):\n        # CPU\n        cpu_percent = psutil.cpu_percent()\n        self.cpu_data.append(cpu_percent)\n        self.cpu_data = self.cpu_data[-self.max_points:]\n        self.cpu_curve.setData(self.cpu_data)\n        self.cpu_plot.setTitle(f\"CPU ({cpu_percent:.1f}%)\")\n\n        # RAM\n        ram = psutil.virtual_memory()\n        self.ram_data.append(ram.percent)\n        self.ram_data = self.ram_data[-self.max_points:]\n        self.ram_curve.setData(self.ram_data)\n        self.ram_plot.setTitle(f\"RAM ({ram.percent:.1f}%)\")\n\n        # GPU\n        self.gpu_data.append(self.gpu_percent)\n        self.gpu_data = self.gpu_data[-self.max_points:]\n        self.gpu_curve.setData(self.gpu_data)\n        self.gpu_plot.setTitle(f\"GPU ({self.gpu_percent:.1f}%)\")\n\n        # Network\n        net_io = psutil.net_io_counters()\n        sent_speed = (net_io.bytes_sent - self.last_net_io.bytes_sent) / 1024\n        recv_speed = (net_io.bytes_recv - self.last_net_io.bytes_recv) / 1024\n        self.net_label.setText(f\"\u2191 {sent_speed:.1f} KB/s   \u2193 {recv_speed:.1f} KB/s\")\n        self.last_net_io = net_io\n\n    def update_background_stats(self, top_procs, gpu_percent):\n        self.gpu_percent = gpu_percent\n        self.process_table.setRowCount(len(top_procs))\n        for row, p in enumerate(top_procs):\n            name_item = QTableWidgetItem(p['name'][:20])\n            cpu_item = QTableWidgetItem(f\"{p['cpu_percent']:.1f}\")\n            ram_item = QTableWidgetItem(f\"{p['memory_percent']:.1f}\")\n            for col, item in enumerate([name_item, cpu_item, ram_item]):\n                item.setTextAlignment(Qt.AlignCenter)\n                self.process_table.setItem(row, col, item)\n\n    def closeEvent(self, event):\n        self.worker.running = False\n        self.worker_thread.quit()\n        self.worker_thread.wait()\n        super().closeEvent(event)\n\n\n\nclass BackgroundWorker(QObject):\n    updated = Signal(list, float)  # processes, gpu_percent\n\n    def __init__(self):\n        super().__init__()\n        self.running = True\n\n    def run(self):\n        while self.running:\n            try:\n                # Get top processes (sorted)\n                procs = [\n                    p.info for p in psutil.process_iter(['name', 'cpu_percent', 'memory_percent'])\n                    if p.info['cpu_percent'] is not None\n                ]\n                top_procs = sorted(procs, key=lambda p: (p['cpu_percent'], p['memory_percent']), reverse=True)[:5]\n            except Exception:\n                top_procs = []\n\n            # Get GPU load\n            try:\n                gpus = GPUtil.getGPUs()\n                gpu_percent = gpus[0].load * 100 if gpus else 0\n            except Exception:\n                gpu_percent = 0\n\n            self.updated.emit(top_procs, gpu_percent)\n            QThread.msleep(3000)  # update every 3 seconds\n",
    "import psutil\nfrom GPUtil import GPUtil\nimport pyqtgraph as pg\nfrom PySide6.QtCore import QTimer, QThread, Signal, QObject, Qt\nfrom PySide6.QtWidgets import QLabel, QTableWidget, QHeaderView, QTableWidgetItem\n\nfrom lib.quol_window import QuolMainWindow\nfrom lib.window_loader import WindowInfo, WindowContext\n\n\nclass MainWindow(QuolMainWindow):\n    def __init__(self, window_info: WindowInfo, window_context: WindowContext):\n        super().__init__('Stats', window_info, window_context, default_geometry=(300, 300, 200, 1))\n\n        self.max_points = 60\n        self.cpu_data: list[float] = [0] * self.max_points\n        self.ram_data: list[float] = [0] * self.max_points\n        self.gpu_data: list[float] = [0] * self.max_points\n        self.gpu_percent = 0\n\n        self.cpu_plot, self.cpu_curve = self.create_plot(\"CPU (%)\", 'cyan')\n        self.ram_plot, self.ram_curve = self.create_plot(\"RAM (%)\", 'orange')\n        self.gpu_plot, self.gpu_curve = self.create_plot(\"GPU (%)\", 'green')\n        self.plots = [self.cpu_plot, self.ram_plot, self.gpu_plot]\n        self.current_plot_index = 0\n\n        self.layout.addWidget(self.plots[self.current_plot_index])\n        self.plots[self.current_plot_index].setFixedSize(180, 150)\n\n        # Add mouse click event to switch plots\n        self.plots[self.current_plot_index].scene().sigMouseClicked.connect(self.cycle_plot)\n\n        # Network label\n        self.net_label = QLabel(\"\u2191 0.0 KB/s \u2193 0.0 KB/s\")\n        self.layout.addWidget(self.net_label)\n        self.last_net_io = psutil.net_io_counters()\n\n        # Processes table\n        self.process_table = QTableWidget(5, 3)\n        self.process_table.setHorizontalHeaderLabels([\"Process\", \"CPU %\", \"RAM %\"])\n        self.process_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)\n        self.process_table.verticalHeader().setVisible(False)\n        self.process_table.setEditTriggers(QTableWidget.EditTrigger.NoEditTriggers)\n        self.process_table.setFocusPolicy(Qt.FocusPolicy.NoFocus)\n        self.process_table.setSelectionMode(QTableWidget.SelectionMode.NoSelection)\n        self.layout.addWidget(self.process_table)\n\n        # Timers and background worker setup as before\n        self.timer = QTimer(self)\n        self.timer.timeout.connect(self.update_main_stats)\n        self.timer.start(1000)\n\n        self.worker = BackgroundWorker()\n        self.worker_thread = QThread()\n        self.worker.moveToThread(self.worker_thread)\n        self.worker.updated.connect(self.update_background_stats)\n        self.worker_thread.started.connect(self.worker.run)\n        self.worker_thread.start()\n\n    @staticmethod\n    def create_plot(base_title, color):\n        plot_widget = pg.PlotWidget()\n        plot_widget.setBackground('#1e1e1e')\n        plot_widget.showGrid(x=True, y=True)\n        plot_widget.setYRange(0, 100)\n        curve = plot_widget.plot(pen=pg.mkPen(color=color, width=2))\n        plot_widget.setTitle(f\"{base_title} (0%)\")\n        return plot_widget, curve\n\n    def cycle_plot(self, event):\n        current_plot = self.plots[self.current_plot_index]\n        self.layout.removeWidget(current_plot)\n        current_plot.scene().sigMouseClicked.disconnect(self.cycle_plot)\n        current_plot.hide()\n\n        # Move to next plot index\n        self.current_plot_index = (self.current_plot_index + 1) % len(self.plots)\n        next_plot = self.plots[self.current_plot_index]\n\n        # Add next plot widget\n        self.layout.insertWidget(0, next_plot)  # add at the top\n        next_plot.setFixedSize(180, 150)\n        next_plot.show()\n        next_plot.scene().sigMouseClicked.connect(self.cycle_plot)\n\n    def update_main_stats(self):\n        cpu_percent = psutil.cpu_percent()\n        self.cpu_data.append(cpu_percent)\n        self.cpu_data = self.cpu_data[-self.max_points:]\n        self.cpu_curve.setData(self.cpu_data)\n        self.cpu_plot.setTitle(f\"CPU ({cpu_percent:.1f}%)\")\n\n        ram = psutil.virtual_memory()\n        self.ram_data.append(ram.percent)\n        self.ram_data = self.ram_data[-self.max_points:]\n        self.ram_curve.setData(self.ram_data)\n        self.ram_plot.setTitle(f\"RAM ({ram.percent:.1f}%)\")\n\n        self.gpu_data.append(self.gpu_percent)\n        self.gpu_data = self.gpu_data[-self.max_points:]\n        self.gpu_curve.setData(self.gpu_data)\n        self.gpu_plot.setTitle(f\"GPU ({self.gpu_percent:.1f}%)\")\n\n        # Network speed update\n        net_io = psutil.net_io_counters()\n        sent_speed = (net_io.bytes_sent - self.last_net_io.bytes_sent) / 1024\n        recv_speed = (net_io.bytes_recv - self.last_net_io.bytes_recv) / 1024\n        self.net_label.setText(f\"\u2191 {sent_speed:.1f} KB/s   \u2193 {recv_speed:.1f} KB/s\")\n        self.last_net_io = net_io\n\n    def update_background_stats(self, top_procs, gpu_percent):\n        self.gpu_percent = gpu_percent\n        self.process_table.setRowCount(len(top_procs))\n        for row, p in enumerate(top_procs):\n            name_item = QTableWidgetItem(p['name'][:20])\n            cpu_item = QTableWidgetItem(f\"{p['cpu_percent']:.1f}\")\n            ram_item = QTableWidgetItem(f\"{p['memory_percent']:.1f}\")\n            for col, item in enumerate([name_item, cpu_item, ram_item]):\n                item.setTextAlignment(Qt.AlignmentFlag.AlignCenter)\n                self.process_table.setItem(row, col, item)\n\n    def closeEvent(self, event):\n        self.worker.running = False\n        self.worker_thread.quit()\n        self.worker_thread.wait()\n        super().closeEvent(event)\n\n\nclass BackgroundWorker(QObject):\n    updated = Signal(list, float)  # processes, gpu_percent\n\n    def __init__(self):\n        super().__init__()\n        self.running = True\n\n    def run(self):\n        while self.running:\n            try:\n                procs = [\n                    p.info for p in psutil.process_iter(['name', 'cpu_percent', 'memory_percent'])\n                    if p.info['cpu_percent'] is not None\n                ]\n                top_procs = sorted(procs, key=lambda p: (p['cpu_percent'], p['memory_percent']), reverse=True)[:5]\n            except psutil.NoSuchProcess:\n                top_procs = []\n\n            try:\n                gpus = GPUtil.getGPUs()\n                gpu_percent = gpus[0].load * 100 if gpus else 0\n            except Exception:\n                gpu_percent = 0\n\n            self.updated.emit(top_procs, gpu_percent)\n            QThread.msleep(3000)\n",
    "header.setSectionResizeMode(0, QHeaderView.Stretch) ",
    "self.process_table.horizontalHeader()",
    "header = self.process_table.horizontalHeader()\nheader.setSectionResizeMode(0, QHeaderView.Stretch)        # Process column\nheader.setSectionResizeMode(1, QHeaderView.ResizeToContents)  # CPU %\nheader.setSectionResizeMode(2, QHeaderView.ResizeToContents)  # RAM %"
  ],
  "sticky": {}
}